syntax="proto3";

package filodb.grpc;

import "range_vector.proto";

option java_outer_classname = "GrpcMultiPartitionQueryService";
option java_generate_equals_and_hash = true;



message QueryParams {
      uint64 start                         = 1;
      uint64 end                           = 2;
      uint64 step                          = 3;
      uint64 time                          = 4;
      string promQL                        = 5;
      bool verbose                         = 6;
      bool isUnavailable                   = 7;
      optional string remoteQueryPath      = 8;
}

message PerQueryLimits {
  optional uint32 execPlanSamples               = 1; // Limit on ExecPlan results in samples
  optional uint64 execPlanResultBytes           = 2; // Limit on ExecPlan results in bytes
  optional uint32 groupByCardinality            = 3; // Limit on "group by" clause results
  optional uint32 joinQueryCardinality          = 4; // Limit on binary join results
  optional uint64 timeSeriesSamplesScannedBytes = 5; // Limit on max estimated data scanned per shard
  optional uint32 timeSeriesScanned             = 6; // Limit on max time series scanned
  optional uint64 rawScannedBytes               = 7; // Limit on max actual scanned bytes per shard
}

message PlannerParams {
    optional string applicationId          = 1;
    optional uint32 queryTimeoutMillis     = 2;
    optional PerQueryLimits enforcedLimits = 3;
    optional PerQueryLimits warnLimits     = 4;
    optional string queryOrigin            = 5;
    optional string queryOriginId          = 6;
    optional string queryPrincipal         = 7;
    optional bool timeSplitEnabled         = 8;
    optional uint64 minTimeRangeForSplitMs = 9;
    optional uint64 splitSizeMs            = 10;
    optional bool skipAggregatePresent     = 11;
    optional bool processFailure           = 12;
    optional bool processMultiPartition    = 13;
    optional bool allowPartialResults      = 14;
    optional bool histogramMap             = 15;
    optional bool useProtoExecPlans        = 16;
}

message Request {
      QueryParams queryParams       = 1;
      PlannerParams plannerParams   = 2;
      string dataset                = 3;
      string plannerSelector        = 4;
}

message StreamingErrorResponse {
  string queryId                                 = 1;
  QueryResultStats stats                         = 2;
  Throwable throwable                            = 3;
  string planId                                  = 4;
}

message StreamingBodyResponse {
  string queryId                                 = 1;
  repeated SerializableRangeVector result        = 2;
  string planId                                  = 3;
}

message StreamingFooterResponse {
  string queryId                                 = 1;
  QueryResultStats stats                         = 2;
  bool mayBePartial                              = 3;
  optional string partialResultReason            = 4;
  string planId                                  = 5;
  optional QueryWarnings warnings                = 6;
}


message StreamingHeaderResponse {
  string queryId                                 = 1;
  ResultSchema resultSchema                      = 2;
  string planId                                  = 3;
}

message StreamingResponse {
    oneof streamingMessage {
        StreamingHeaderResponse header             = 1;
        StreamingBodyResponse body                 = 2;
        StreamingFooterResponse footer             = 3;
        StreamingErrorResponse error               = 4;
    }
}

// Serialize Throwables

message StackTraceElement {
  string declaringClass              = 1;
  string methodName                  = 2;
  string fileName                    = 3;
  uint32 lineNumber                  = 4;
}

message Throwable {
  optional string message            = 1;
  optional Throwable cause           = 2;
  repeated StackTraceElement stack   = 3;
  string exceptionClass              = 4;
  map<string, string> metadata       = 5;
}

message Response {

  string id                                      = 1;
  QueryResultStats stats                         = 2;
  optional Throwable throwable                   = 3;
  optional ResultSchema resultSchema             = 4;
  repeated SerializableRangeVector result        = 5;
  optional bool mayBePartial                     = 6;
  optional string partialResultReason            = 7;
  optional QueryWarnings warnings                = 8;
}

// Objects for Query stats
message Stat {
  uint64 timeSeriesScanned    = 1;
  uint64 dataBytesScanned     = 2;
  uint64 resultBytes          = 3;
  uint64 cpuNanos             = 4;
}

message QueryResultStats {
  // Note that the key in QueryStats is a Seq[String], we will use "##@##" as a separator string to
  // encode the Seq to string and back to Seq since we dont expect "##@##" to be a character in the grouping
  // sequence of string
  map<string, Stat> stats     = 1;
}

message QueryWarnings {
  uint32 execPlanSamples               = 1;
  uint64 execPlanResultBytes           = 2;
  uint32 groupByCardinality            = 3;
  uint32 joinQueryCardinality          = 4;
  uint64 timeSeriesSamplesScannedBytes = 5;
  uint32 timeSeriesScanned             = 6;
  uint64 rawScannedBytes               = 7;
}


service RemoteExec {

  rpc exec(Request) returns (Response);

  rpc execStreaming(Request) returns (stream StreamingResponse);
}