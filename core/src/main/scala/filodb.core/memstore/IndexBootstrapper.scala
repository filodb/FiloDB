package filodb.core.memstore

import scala.concurrent.Future

import kamon.Kamon
import monix.execution.Scheduler
import monix.reactive.{Observable, OverflowStrategy}

import filodb.core.DatasetRef
import filodb.core.store.{ColumnStore, PartKeyRecord}

trait IndexBootstrapper {
  /**
    * Bootstrap the lucene index for the shard
    * using PartKeyRecord objects read from some persistent source.
    *
    * The partId used in the lucene index is generated by invoking
    * the function provided on the threadpool requested.
    *
    * @param index the lucene index to populate
    * @param shardNum shard number
    * @param ref dataset ref
    * @param ingestSched the thread on which to get the partitionId to be used to populate the index record
    * @param addPartKey the function to invoke to get the partitionId to be used to populate the index record
    * @return
    */
  def bootstrapIndex(index: PartKeyLuceneIndex,
                     shardNum: Int,
                     ref: DatasetRef,
                     ingestSched: Scheduler)
                     (addPartKey: PartKeyRecord => Int): Future[Unit] = {
    val tracer = Kamon.buildSpan("memstore-recover-index-latency")
      .withTag("dataset", ref.dataset)
      .withTag("shard", shardNum).start()

    fetchPartKeyRecords(ref, shardNum)
      .asyncBoundary(OverflowStrategy.Default)
      .executeOn(ingestSched)
      .map { pk =>
        val partId = addPartKey(pk)
        index.addPartKey(pk.partKey, partId, pk.startTime, pk.endTime)()
      }
      .completedL.runAsync(ingestSched)
      .map { _ =>
        index.refreshReadersBlocking()
        tracer.finish()
      }(ingestSched)
  }

  /**
    * Implementations of this method can customize the fetch of the persisted
    * PartKeyRecords
    */
  def fetchPartKeyRecords(ref: DatasetRef, shardNum: Int): Observable[PartKeyRecord]

}

/**
  * Index Bootstrapper that fetches PartKeyRecords from a ColStore.
  */
class ColStoreIndexBootstrapper(colStore: ColumnStore) extends IndexBootstrapper {
  override def fetchPartKeyRecords(ref: DatasetRef,
                                   shardNum: Int): Observable[PartKeyRecord] = {
    colStore.scanPartKeys(ref, shardNum)
  }
}


