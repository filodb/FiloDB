package filodb.core.memstore

import kamon.Kamon
import monix.eval.Task
import monix.reactive.{Observable, OverflowStrategy}

import filodb.core.DatasetRef
import filodb.core.store.{ColumnStore, PartKeyRecord}

class IndexBootstrapper(colStore: ColumnStore) {

  /**
    * Bootstrap the lucene index for the shard
    * using PartKeyRecord objects read from some persistent source.
    *
    * The partId used in the lucene index is generated by invoking
    * the function provided on the threadpool requested.
    *
    * @param index the lucene index to populate
    * @param shardNum shard number
    * @param ref dataset ref
    * @param assignPartId the function to invoke to get the partitionId to be used to populate the index record
    * @return
    */
  def bootstrapIndex(index: PartKeyLuceneIndex,
                     shardNum: Int,
                     ref: DatasetRef)
                     (assignPartId: PartKeyRecord => Int): Task[Long] = {
    val tracer = Kamon.buildSpan("memstore-recover-index-latency")
      .withTag("dataset", ref.dataset)
      .withTag("shard", shardNum).start()

    colStore.scanPartKeys(ref, shardNum)
      .map { pk =>
        val partId = assignPartId(pk)
        index.addPartKey(pk.partKey, partId, pk.startTime, pk.endTime)()
      }
      .countL
      .map { count =>
        index.refreshReadersBlocking()
        tracer.finish()
        count
      }
  }

  def updateIndex(index: PartKeyLuceneIndex,
                  shardNum: Int,
                  ref: DatasetRef,
                  fromHour: Long,
                  toHour: Long)
                  (lookUpOrAssignPartId: PartKeyRecord => Int): Task[Long] = {
    val tracer = Kamon.buildSpan("downsample-store-update-index-latency")
      .withTag("dataset", ref.dataset)
      .withTag("shard", shardNum).start()

    Observable.fromIterable(fromHour to toHour).flatMap { hour =>
      colStore.getPartKeysByUpdateHour(ref, shardNum, hour)
    }.asyncBoundary(OverflowStrategy.Default)
     .map { pk =>
        val partId = lookUpOrAssignPartId(pk)
        index.upsertPartKey(pk.partKey, partId, pk.startTime, pk.endTime)()
     }
     .countL
     .map { count =>
        index.refreshReadersBlocking()
        tracer.finish()
        count
     }
  }

}

